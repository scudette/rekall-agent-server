[{"plugin": "AFF4Acquire", "args": {"files": {"type": "ArrayStringParser", "help": "Also acquire files matching the following globs."}, "max_file_size": {"default": 104857600, "type": "IntParser", "help": "Maximum file size to acquire."}, "compression": {"default": "snappy", "type": "String", "help": "The compression to use.", "choices": ["snappy", "stored", "zlib"]}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "destination": {"positional": true, "type": "String", "help": "The destination file to create. "}, "destination_url": {"type": "String", "help": "The destination AFF4 URL to create. "}, "also_mapped_files": {"type": "Boolean", "help": "Also get mapped or opened files (requires a profile)"}, "gce_credentials_path": {"type": "String", "help": "A path to the GCE service account credentials to use."}, "gce_credentials": {"type": "String", "help": "The GCE service account credentials to use."}, "also_pagefile": {"type": "Boolean", "help": "Also get the pagefile/swap partition (requires a profile)"}, "also_memory": {"default": "auto", "type": "Boolean", "help": "Also acquire physical memory. If not specified we acquire physical memory only when no other operation is specified."}, "append": {"default": false, "type": "Boolean", "help": "Append to the current volume."}}, "description": "Copy the physical address space to an AFF4 file.\n\n\nNOTE: This plugin does not require a working profile - unless the user also\nwants to copy the pagefile or mapped files. In that case we must analyze the\nlive memory to gather the required files.", "active_modes": [], "name": "aff4acquire"}, {"plugin": "AFF4Dump", "args": {"regex": {"default": ".", "type": "RegEx", "help": "Regex of filenames to dump."}, "volume": {"positional": true, "required": true, "type": "String", "help": "Volume to list."}, "gce_credentials_path": {"type": "String", "help": "A path to the GCE service account credentials to use."}, "gce_credentials": {"type": "String", "help": "The GCE service account credentials to use."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "long": {"type": "Boolean", "help": "Include additional information about each stream."}}, "description": "Dump the entire resolver contents for an AFF4 volume.\n", "active_modes": [], "name": "aff4dump"}, {"plugin": "AFF4Export", "args": {"regex": {"default": ".", "type": "RegEx", "help": "Regex of filenames to dump."}, "volume": {"positional": true, "required": true, "type": "String", "help": "Volume to list."}, "gce_credentials_path": {"type": "String", "help": "A path to the GCE service account credentials to use."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "gce_credentials": {"type": "String", "help": "The GCE service account credentials to use."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Exports all the streams in an AFF4 Volume.\n", "active_modes": [], "name": "aff4export"}, {"plugin": "AFF4Ls", "args": {"regex": {"default": ".", "type": "RegEx", "help": "Regex of filenames to dump."}, "volume": {"positional": true, "required": true, "type": "String", "help": "Volume to list."}, "gce_credentials_path": {"type": "String", "help": "A path to the GCE service account credentials to use."}, "gce_credentials": {"type": "String", "help": "The GCE service account credentials to use."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "long": {"type": "Boolean", "help": "Include additional information about each stream."}}, "description": "List the content of an AFF4 file.\n", "active_modes": [], "name": "aff4ls"}, {"plugin": "APIGenerator", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "output_file": {"type": "String", "help": "If specified we write the API into this file in YAML."}}, "description": "Generate the plugin API document.\n", "active_modes": [], "name": "api"}, {"plugin": "APIPslist", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A live pslist plugin using the APIs.\n", "active_modes": ["mode_live_api"], "name": "pslist"}, {"plugin": "APISessionGenerator", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "output_file": {"type": "String", "help": "If specified we write the API into this file in YAML."}}, "description": "\n", "active_modes": [], "name": "session_api"}, {"plugin": "APISetProcessContext", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A cc plugin for setting process context to live mode.\n", "active_modes": ["mode_live_api"], "name": "cc"}, {"plugin": "AgentInfo", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Just emit information about the agent.\n\nThe output format is essentially key value pairs. This is useful for efilter\nqueries.", "active_modes": ["mode_agent"], "name": "agent_info"}, {"plugin": "AnalyzeStruct", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "search": {"default": 256, "type": "IntParser", "help": "How far back to search for pool tag."}, "offset": {"positional": true, "required": true, "type": "SymbolAddress", "help": "A virtual address to analyze."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "size": {"default": 256, "type": "IntParser", "help": "How many elements to identify."}}, "description": "A plugin to analyze a memory location.\n", "active_modes": ["mode_windows_memory"], "name": "analyze_struct"}, {"plugin": "Arp", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "print the ARP table.\n", "active_modes": ["mode_linux_memory"], "name": "arp"}, {"plugin": "ArtifactsCollector", "args": {"artifact_files": {"type": "ArrayStringParser", "help": "A list of additional yaml files to load which contain artifact definitions."}, "artifacts": {"positional": true, "required": true, "type": "ArrayStringParser", "help": "A list of artifact names to collect."}, "create_timeline": {"default": false, "type": "Bool", "help": "Also generate a timeline file."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "writer": {"type": "Choices", "help": "Writer for artifact results.", "choices": ["Zip", "Directory"]}, "output_path": {"type": "String", "help": "Path suitable for dumping files."}, "definitions": {"type": "ArrayStringParser", "help": "An inline artifact definition in yaml format."}, "copy_files": {"default": false, "type": "Bool", "help": "Copy files into the output."}}, "description": "Collects artifacts.\n", "active_modes": [], "name": "artifact_collector"}, {"plugin": "ArtifactsList", "args": {"regex": {"default": ".", "type": "RegEx", "help": "Filter the artifact name."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "labels": {"type": "ArrayStringParser", "help": "Filter by these labels."}, "supported_os": {"type": "ArrayStringParser", "help": "If specified show for these OSs, otherwise autodetect based on the current image."}, "all": {"type": "Bool", "help": "Show all artifacts."}}, "description": "List details about all known artifacts.\n", "active_modes": [], "name": "artifact_list"}, {"plugin": "ArtifactsView", "args": {"artifacts": {"positional": true, "type": "ArrayStringParser", "help": "A list of artifacts to display"}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "\n", "active_modes": [], "name": "artifact_view"}, {"plugin": "AtomScan", "args": {"scan_kernel_nonpaged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel non-paged pool."}, "scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "scan_kernel_code": {"default": false, "type": "Boolean", "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_paged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel paged pool."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "sort_by": {"default": "offset", "type": "String", "help": "Sort by [offset | atom | refcount]", "choices": ["atom", "refcount", "offset"]}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search in each selected region."}, "scan_kernel_session_pools": {"default": false, "type": "Boolean", "help": "Scan session pools for all processes."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Pool scanner for _RTL_ATOM_TABLE\n", "active_modes": ["mode_windows_memory"], "name": "atomscan"}, {"plugin": "Atoms", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Print session and window station atom tables.\n\nFrom:\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/ms649053.aspx\n\nAn atom table is a system-defined table that stores strings and\ncorresponding identifiers. An application places a string in an atom table\nand receives a 16-bit integer, called an atom, that can be used to access\nthe string. A string that has been placed in an atom table is called an atom\nname.\n\nThe global atom table is available to all applications. When an application\nplaces a string in the global atom table, the system generates an atom that\nis unique throughout the system. Any application that has the atom can\nobtain the string it identifies by querying the global atom table.\n\n(The global atom tables are only global within each session).", "active_modes": ["mode_windows_memory"], "name": "atoms"}, {"plugin": "Banner", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Prints the Linux banner information.\n", "active_modes": ["mode_linux_memory"], "name": "banner"}, {"plugin": "BashHistory", "args": {"proc_regex": {"default": "^bash$", "type": "RegEx", "help": "The processes we should examine."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "scan_entire_address_space": {"type": "Boolean", "help": "Scan the entire process address space, not only the heap."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Scan the bash process for history.\n\nBased on original algorithm by Andrew Case.", "active_modes": ["mode_linux_memory"], "name": "bash"}, {"plugin": "BuildIndex", "description": "Generate a profile index file based on an index specification.\n\nThe index specification is currently a yaml file with the following\nstructure:\n\n```\nbase_symbol: (string) # OPTIONAL Compute ALL offsets as relative to this\n    symbol. This includes MaxOffset and MinOffset.\nsymbols: (array of dicts) # A list of symbols to index.\n  -\n    name: (string) # Symbol name\n    data: (string) # Data that should be at the symbol's offset\n    shift: (int) # OPTIONAL Adjust symbol offset by this number\n```\n\n## Example:\n\n```\npath: win32k.sys\nsymbols:\n  -\n    # The name of the symbol we test for.\n    name: \"??_C@_1BO@KLKIFHLC@?$AAG?$AAU?$AAI?$AAF?$AAo?$AAn?$AAt?$AA?4?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@\"\n\n    # The data we expect to find at that offset.\n    data: \"47005500490046006f006e0074002e00480065006900670068007400\"\n\n  -\n    name: \"wcschr\"\n    shift: -1\n    data: \"90\"\n```\n\nThe result is an index profile. This has an $INDEX section which is a dict,\nwith keys being the profile name, and values being a list of (offset, match)\ntuples. For example:\n\n```\n{\n \"$INDEX\": {\n  \"tcpip.sys/AMD64/6.0.6001.18000/0C1A1EC1D61E4508A33F5212FC1B37202\": [[1184600,\n\"495053656344656c657465496e626f756e644f7574626f756e64536150616972\"]],\n  \"tcpip.sys/AMD64/6.0.6001.18493/29A4DBCAF840463298F40190DD1492D02\": [[1190376,\n\"495053656344656c657465496e626f756e644f7574626f756e64536150616972\"]],\n  \"tcpip.sys/AMD64/6.0.6002.18272/7E79532FC7E349C690F5FBD16E3562172\": [[1194296,\n\"495053656344656c657465496e626f756e644f7574626f756e64536150616972\"]], ...\n\n \"$METADATA\": {\n  \"ProfileClass\": \"Index\",\n  \"Type\": \"Profile\"\n  \"MaxOffset\": 546567\n  \"MinOffset\": 0\n  }\n }\n```", "name": "build_index", "active_modes": []}, {"plugin": "BuildProfileLocally", "description": "Download and builds a profile locally in one step.\n\nWe store the profile in the first repository in the profile_path which must\nbe writable. Usually this is a caching repository so the profile goes in the\nlocal cache.", "name": "build_local_profile", "active_modes": []}, {"plugin": "CallbackScan", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Print system-wide notification routines by scanning for them.\n\nNote this plugin is quite inefficient - consider using the callbacks plugin\ninstead.", "active_modes": ["mode_windows_memory"], "name": "callback_scan"}, {"plugin": "Callbacks", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Enumerate callback routines.\n\nThis plugin just enumerates installed callback routines from various\nsources. It does not scan for them.\n\nThis plugin is loosely based on the original Volatility plugin of the same\nname but much expanded using new information.\n\nReference:\n<http://www.codemachine.com/notes.html>", "active_modes": ["mode_windows_memory"], "name": "callbacks"}, {"plugin": "CertDump", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}}, "description": "Dump certs found by cert scan.\n", "active_modes": [], "name": "simple_certdump"}, {"plugin": "CertScan", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Dump RSA private and public SSL keys from the physical address space.\n", "active_modes": [], "name": "simple_certscan"}, {"plugin": "CertYaraScan", "args": {"scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "pre_context": {"default": 0, "type": "IntParser", "help": "Context to print before the hit."}, "string": {"type": "String", "help": "A verbatim string to search for."}, "binary_string": {"type": "String", "help": "A binary string (encoded as hex) to search for. e.g. 000102[1-200]0506"}, "yara_expression": {"default": "\nrule x509 {\n  strings: $a = {30 82 ?? ?? 30 82 ?? ??} condition: $a\n}\nrule pkcs {\n  strings: $a = {30 82 ?? ?? 02 01 00} condition: $a\n}\n", "hidden": true, "type": "String", "help": ""}, "yara_file": {"hidden": true, "type": "String", "help": ""}, "hits": {"default": 1000000, "type": "IntParser", "help": "Total number of hits to report."}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "scan_kernel_session_pools": {"default": false, "type": "Boolean", "help": "Scan session pools for all processes."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "scan_kernel_nonpaged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel non-paged pool."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "scan_kernel_code": {"default": false, "type": "Boolean", "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_paged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel paged pool."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search in each selected region."}, "context": {"default": 64, "type": "IntParser", "help": "Context to print after the hit."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Scan certificates in windows memory regions.\n", "active_modes": ["mode_windows_memory"], "name": "certscan"}, {"plugin": "CheckAFInfo", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Verifies the operation function pointers of network protocols.\n", "active_modes": ["mode_linux_memory"], "name": "check_afinfo"}, {"plugin": "CheckCreds", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Checks if any processes are sharing credential structures\n", "active_modes": ["mode_linux_memory"], "name": "check_creds"}, {"plugin": "CheckIdt", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Checks if the IDT has been altered\n", "active_modes": ["mode_linux_memory"], "name": "check_idt"}, {"plugin": "CheckModules", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Compares module list to sysfs info, if available.\n\nSysfs contains a kset objects for a number of kernel objects (kobjects). One\nof the ksets is the \"module_kset\" which holds references to all loaded\nkernel modules.\n\nEach struct module object holds within it a kobj struct for reference\ncounting. This object is referenced both from the struct module and the\nsysfs kset.\n\nThis plugin traverses the kset and resolves the kobj back to its containing\nobject (which is the struct module itself). We then compare the struct\nmodule with the list of known modules (which is obtained by traversing the\nmodule's list member). So if a module were to simply unlink itself from the\nlist, it would still be found by its reference from sysfs.", "active_modes": ["mode_linux_memory"], "name": "check_modules"}, {"plugin": "CheckPEHooks", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "image_base": {"default": 0, "positional": true, "type": "SymbolAddress", "help": "The base address of the pe image in memory."}, "type": {"default": "all", "type": "Choice", "help": "Type of hook to display.", "choices": ["all", "iat", "inline", "eat"]}, "thorough": {"default": false, "type": "Boolean", "help": "By default we take some optimization. This flags forces thorough but slower checks."}}, "description": "Checks a pe file mapped into memory for hooks.\n", "active_modes": ["mode_windows_memory"], "name": "check_pehooks"}, {"plugin": "CheckProcFops", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "all": {"type": "Boolean", "help": "Specify to see all the fops, even if they are known."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Checks the proc filesystem for hooked f_ops.\n", "active_modes": ["mode_linux_memory"], "name": "check_proc_fops"}, {"plugin": "CheckSyscall", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Checks if the system call table has been altered.\n", "active_modes": ["mode_linux_memory"], "name": "check_syscall"}, {"plugin": "CheckTTY", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Checks tty devices for hooks.\n\nSome malware insert a hook into the ops struct of the tty driver. This\nplugin enumerates all tty_struct objects and checks if their ops handlers\nhave been subverted.", "active_modes": ["mode_linux_memory"], "name": "check_ttys"}, {"plugin": "CheckTaskFops", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "all": {"type": "Boolean", "help": "Specify to see all the fops, even if they are known."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Check open files in tasks for f_ops modifications.\n", "active_modes": ["mode_linux_memory"], "name": "check_task_fops"}, {"plugin": "CheckTrapTable", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Checks the traps table for hooks.\n", "active_modes": ["mode_darwin_memory"], "name": "check_trap_table"}, {"plugin": "Clipboard", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Extract the contents of the windows clipboard\n", "active_modes": ["mode_windows_memory"], "name": "clipboard"}, {"plugin": "CmdScan", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "max_history": {"default": 50, "type": "IntParser", "help": "Value of history buffer size. See HKEY_CURRENT_USER\\Console\\HistoryBufferSize for default."}}, "description": "Extract command history by scanning for _COMMAND_HISTORY\n", "active_modes": ["mode_windows_memory"], "name": "cmdscan"}, {"plugin": "Collect", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "type_name": {"positional": true, "required": true, "type": "String", "help": "The type (struct) to collect."}}, "description": "Collect instances of struct of type 'type_name'.\n\nThis plugin will find all other plugins that produce 'type_name' and merge\nall their output. For example, running collect 'proc' will give you a\nrudimentary psxview.\n\nThis plugin is mostly used by other plugins, like netstat and psxview.", "active_modes": [], "name": "collect"}, {"plugin": "ConnScan", "args": {"scan_kernel_nonpaged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel non-paged pool."}, "scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "scan_kernel_code": {"default": false, "type": "Boolean", "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_paged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel paged pool."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search in each selected region."}, "scan_kernel_session_pools": {"default": false, "type": "Boolean", "help": "Scan session pools for all processes."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Scan Physical memory for _TCPT_OBJECT objects (tcp connections)\n", "active_modes": ["mode_windows_memory", "mode_xp"], "name": "connscan"}, {"plugin": "Connections", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Print list of open connections [Windows XP Only]\n---------------------------------------------\n\nThis module enumerates the active connections from tcpip.sys.\n\nNote that if you are using a hibernated image this might not work\nbecause Windows closes all sockets before hibernating. You might\nfind it more effective to do conscan instead.\n\nActive TCP connections are found in a hash table. The Hash table is given by\nthe _TCBTable symbol. The size of the hash table is found in the\n_MaxHashTableSize variable.", "active_modes": ["mode_windows_memory", "mode_xp"], "name": "connections"}, {"plugin": "ConsoleScan", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "max_history": {"default": 50, "type": "IntParser", "help": "Value of history buffer size. See HKEY_CURRENT_USER\\Console\\HistoryBufferSize for default."}, "history_buffers": {"default": 4, "type": "IntParser", "help": "Value of history buffer size. See HKEY_CURRENT_USER\\Console\\HistoryBufferSize for default."}}, "description": "Extract command history by scanning for _CONSOLE_INFORMATION\n", "active_modes": ["mode_windows_memory"], "name": "consolescan"}, {"plugin": "Consoles", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Enumerate command consoles.\n", "active_modes": ["mode_windows_memory"], "name": "consoles"}, {"plugin": "ConvertProfile", "args": {"source": {"positional": true, "required": true, "type": "String", "help": "Filename of profile to read."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "profile_class": {"type": "String", "help": "The name of the profile implementation to specify. If not specified, we autodetect."}, "out_file": {"positional": true, "required": true, "type": "String", "help": "Path for output file."}, "converter": {"type": "String", "help": "The name of the converter to use. If not specified autoguess."}}, "description": "Convert a profile from another program to the Rekall format.\n\nThe Rekall profile format is optimized for loading at runtime. This plugin\nproduces a Rekall profile from a variety of sources, including:\n\n- Linux debug compiled kernel module (see tool/linux/README)\n- OSX Dwarfdump outputs.", "active_modes": [], "name": "convert_profile"}, {"plugin": "CpuInfo", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Prints information about each active processor.\n", "active_modes": ["mode_linux_memory"], "name": "cpuinfo"}, {"plugin": "DLLDump", "args": {"regex": {"default": ".", "type": "RegEx", "help": "A Regular expression for selecting the dlls to dump."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "out_fd": {"type": "String", "help": "A file like object to write the output."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Dump DLLs from a process address space\n", "active_modes": ["mode_windows_memory"], "name": "dlldump"}, {"plugin": "DT", "args": {"member_offset": {"type": "IntParser", "help": "If specified we only show the member at this offset."}, "address_space": {"type": "AddressSpace", "help": "The address space to use."}, "offset": {"default": 0, "type": "IntParser", "help": "Name of a struct definition."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "target": {"positional": true, "required": true, "type": "String", "help": "Name of a struct definition."}}, "description": "Print a struct or other symbol.\n\nReally just a convenience function for instantiating the object and printing\nall its members.", "active_modes": [], "name": "dt"}, {"plugin": "DTBScan", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "Stop scanning after this many mb."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Scans the physical memory for DTB values.\n\nThis plugin can compare the DTBs found against the list of known processes\nto find hidden processes.", "active_modes": ["mode_windows_memory"], "name": "dtbscan"}, {"plugin": "DarwinAddressResolver", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "symbol": {"default": [], "type": "ArrayString", "help": "List of symbols to lookup"}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A Darwin specific address resolver plugin.\n", "active_modes": ["mode_darwin_memory"], "name": "address_resolver"}, {"plugin": "DarwinAllProcCollector", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "active_modes": ["mode_darwin_memory"], "name": "allproc"}, {"plugin": "DarwinArp", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Show information about arp tables.\n", "active_modes": ["mode_darwin_memory"], "name": "arp"}, {"plugin": "DarwinBootParameters", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Prints the kernel command line.\n", "active_modes": ["mode_darwin_memory"], "name": "boot_cmdline"}, {"plugin": "DarwinCheckSysCalls", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Checks the syscall table.\n", "active_modes": ["mode_darwin_memory"], "name": "check_syscalls"}, {"plugin": "DarwinDMSG", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Print the kernel debug messages.\n", "active_modes": ["mode_darwin_memory"], "name": "dmesg"}, {"plugin": "DarwinDeadFileprocCollector", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "active_modes": ["mode_darwin_memory"], "name": "dead_fileprocs"}, {"plugin": "DarwinDeadProcessCollector", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Lists dead processes using the proc allocation zone.\n", "active_modes": ["mode_darwin_memory"], "name": "dead_procs"}, {"plugin": "DarwinDumpCompressedPages", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}}, "description": "Dumps all compressed pages.\n", "active_modes": ["mode_darwin_memory"], "name": "dumpcompressedmemory"}, {"plugin": "DarwinDumpZone", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Dumps an allocation zone's contents.\n", "active_modes": ["mode_darwin_memory"], "name": "dump_zone"}, {"plugin": "DarwinFindDTB", "description": "Tries to find the DTB address for the Darwin/XNU kernel.\n\nAs the XNU kernel developed over the years, the best way of deriving this\ninformation changed. This class now offers multiple methods of finding the\nDTB. Calling find_dtb should automatically select the best method for the\njob, based on the profile. It will also attempt to fall back on less ideal\nways of getting the DTB if the best way fails.", "name": "find_dtb", "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinFindKASLR", "description": "A scanner for KASLR slide values in the Darwin kernel.\n\nThe scanner works by looking up a known data structure and comparing\nits actual location to its expected location. Verification is a similar\nprocess, using a second constant. This takes advantage of the fact that both\ndata structures are in a region of kernel memory that maps to the physical\nmemory in a predictable way (see ID_MAP_VTOP).\n\nHuman-readable output includes values of the kernel version string (which is\nused for validation) for manual review, in case there are false positives.", "name": "find_kaslr", "active_modes": ["mode_darwin_memory", "mode_darwin_mountain_lion_plus"]}, {"plugin": "DarwinHandles", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Walks open files of each proc and collects the fileproc.\n\nThis is the same algorithm as lsof, but aimed at just collecting the\nfileprocs, without doing anything with them, or sorting.", "active_modes": ["mode_darwin_memory"], "name": "handles"}, {"plugin": "DarwinIPFilters", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Check IP Filters for hooks.\n", "active_modes": ["mode_darwin_memory"], "name": "ip_filters"}, {"plugin": "DarwinIfnetCollector", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "active_modes": ["mode_darwin_memory"], "name": "ifconfig"}, {"plugin": "DarwinLsmod", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Lists all kernel modules.\n", "active_modes": ["mode_darwin_memory"], "name": "lsmod"}, {"plugin": "DarwinLsof", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Walks open files of each proc in order and prints PID, FD and the handle.\n\nEach process has an array of pointers to fileproc structs - the offset into\nthe array is the file descriptor and each fileproc struct represents a\nhandle on some resource. A type field in the fileproc determines the type\nof the resource pointed to from the fileproc (e.g. vnode, socket, pipe...).", "active_modes": ["mode_darwin_memory"], "name": "lsof"}, {"plugin": "DarwinMachineInfo", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Show information about this machine.\n", "active_modes": ["mode_darwin_memory"], "name": "machine_info"}, {"plugin": "DarwinMaps", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Display the process maps.\n", "active_modes": ["mode_darwin_memory"], "name": "maps"}, {"plugin": "DarwinMemDump", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}}, "description": "Dumps the memory map for darwin tasks.\n", "active_modes": ["mode_darwin_memory"], "name": "memdump"}, {"plugin": "DarwinMemMap", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Prints the memory map for darwin tasks.\n", "active_modes": ["mode_darwin_memory"], "name": "memmap"}, {"plugin": "DarwinMount", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Show mount points.\n", "active_modes": ["mode_darwin_memory"], "name": "mount"}, {"plugin": "DarwinNetstat", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Prints all open sockets we know about, from any source.\n\nNetstat will display even connections that lsof doesn't know about, because\nthey were either recovered from an allocation zone, or found through a\nsecondary mechanism (like system call handler cache).\n\nOn the other hand, netstat doesn't know the file descriptor or, really, the\nprocess that owns the connection (although it does know the PID of the last\nprocess to access the socket.)\n\nNetstat will also tell you, in the style of psxview, if a socket was only\nfound using some of the methods available.", "active_modes": ["mode_darwin_memory"], "name": "netstat"}, {"plugin": "DarwinNotifiers", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Detects hooks in I/O Kit IONotify objects.\n", "active_modes": ["mode_darwin_memory"], "name": "notifiers"}, {"plugin": "DarwinPSAUX", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "List processes with their commandline.\n", "active_modes": ["mode_darwin_memory"], "name": "psaux"}, {"plugin": "DarwinPas2Vas", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "offsets": {"type": "ArrayIntParser", "help": "A list of physical offsets to resolve."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}}, "description": "Resolves a physical address to a virtual addrress in a process.\n", "active_modes": ["mode_darwin_memory"], "name": "pas2vas"}, {"plugin": "DarwinPgrpHashCollector", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "active_modes": ["mode_darwin_memory"], "name": "pgrphash"}, {"plugin": "DarwinPhysicalMap", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Prints the EFI boot physical memory map.\n", "active_modes": ["mode_darwin_memory"], "name": "phys_map"}, {"plugin": "DarwinPidHashProcessCollector", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "active_modes": ["mode_darwin_memory"], "name": "pidhash"}, {"plugin": "DarwinPsTree", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "active_modes": ["mode_darwin_memory"], "name": "pstree"}, {"plugin": "DarwinPslist", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "active_modes": ["mode_darwin_memory"], "name": "pslist"}, {"plugin": "DarwinPsxView", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "active_modes": ["mode_darwin_memory"], "name": "psxview"}, {"plugin": "DarwinRoute", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Show routing table.\n", "active_modes": ["mode_darwin_memory"], "name": "route"}, {"plugin": "DarwinSessionZoneCollector", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "active_modes": ["mode_darwin_memory"], "name": "dead_sessions"}, {"plugin": "DarwinSessions", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Finds sessions by walking their global hashtable.\n", "active_modes": ["mode_darwin_memory"], "name": "sessions"}, {"plugin": "DarwinSetProcessContext", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A cc plugin for windows.\n", "active_modes": ["mode_darwin_memory"], "name": "cc"}, {"plugin": "DarwinSigScan", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Runs a signature scans against physical, kernel or process memory.\n", "active_modes": ["mode_darwin_memory"], "name": "sigscan"}, {"plugin": "DarwinSocketZoneCollector", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "active_modes": ["mode_darwin_memory"], "name": "dead_sockets"}, {"plugin": "DarwinSocketsFromHandles", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Looks up handles that point to a socket and collects the socket.\n", "active_modes": ["mode_darwin_memory"], "name": "open_sockets"}, {"plugin": "DarwinSysctl", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Dumps the sysctl database.\n\nOn OSX the kernel is configured through the sysctl mechanism. This is\nanalogous to /proc or /sysfs on Linux. The configuration space is broken\ninto MIBs - or hierarchical namespace.\n\nhttps://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man8/sysctl.8.html\n\nFor example:\n\nnet.inet.ip.subnets_are_local\nnet.inet.ip.ttl\nnet.inet.ip.use_route_genid\n\nThis is implemented via a singly linked list of sysctl_oid structs. The\nstructs can be on the following types:\n\n- CTLTYPE_INT     means this MIB will handle an int.\n- CTLTYPE_STRING  means this MIB will handle a string.\n- CTLTYPE_QUAD    means this MIB will handle a long long int.\n- CTLTYPE_NODE means this is a node which handles a sublevel of MIBs. It is\n  actually a pointer to a new sysctl_oid_list which handles the sublevel.", "active_modes": ["mode_darwin_memory"], "name": "sysctl"}, {"plugin": "DarwinTTYZoneCollector", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "active_modes": ["mode_darwin_memory"], "name": "dead_ttys"}, {"plugin": "DarwinTaskProcessCollector", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "active_modes": ["mode_darwin_memory"], "name": "tasks"}, {"plugin": "DarwinTerminals", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Lists open ttys.\n", "active_modes": ["mode_darwin_memory"], "name": "terminals"}, {"plugin": "DarwinUnpListCollector", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Walks the global list of sockets in uipc_usrreq.\n", "active_modes": ["mode_darwin_memory"], "name": "unp_sockets"}, {"plugin": "DarwinVADMap", "args": {"start": {"default": 0, "type": "IntParser", "help": "Start reading from this page."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "end": {"default": 9223372036854775808, "type": "IntParser", "help": "Stop reading at this offset."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}}, "description": "Inspect each page in the VAD and report its status.\n\nThis allows us to see the address translation status of each page in the\nVAD.", "active_modes": ["mode_darwin_memory"], "name": "vadmap"}, {"plugin": "DarwinVadDump", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}}, "description": "Dump the VMA memory for a process.\n", "active_modes": ["mode_darwin_memory"], "name": "vaddump"}, {"plugin": "DarwinVtoP", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Describe virtual to physical translation on darwin platforms.\n", "active_modes": ["mode_darwin_memory"], "name": "vtop"}, {"plugin": "DarwinYaraScan", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "pre_context": {"default": 0, "type": "IntParser", "help": "Context to print before the hit."}, "string": {"type": "String", "help": "A verbatim string to search for."}, "binary_string": {"type": "String", "help": "A binary string (encoded as hex) to search for. e.g. 000102[1-200]0506"}, "yara_expression": {"type": "String", "help": "If provided we scan for this yara expression."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "yara_file": {"type": "String", "help": "The yara signature file to read."}, "hits": {"default": 10, "type": "IntParser", "help": "Quit after finding this many hits."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "context": {"default": 64, "type": "IntParser", "help": "Context to print after the hit."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}}, "description": "Scan using yara signatures.\n", "active_modes": ["mode_darwin_memory"], "name": "yarascan"}, {"plugin": "DarwinZoneCollector", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "active_modes": ["mode_darwin_memory"], "name": "zones"}, {"plugin": "DarwinZoneVnodeCollector", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "active_modes": ["mode_darwin_memory"], "name": "dead_vnodes"}, {"plugin": "Describe", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "max_depth": {"default": 0, "positional": true, "type": "IntParser", "help": "The maximum depth to follow mappings."}, "plugin_name": {"positional": true, "required": true, "type": "String", "help": "A plugin or plugin name to describe."}}, "description": "Describe the output of a plugin.\n", "active_modes": [], "name": "describe"}, {"plugin": "DeviceTree", "args": {"scan_kernel_nonpaged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel non-paged pool."}, "scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "scan_kernel_code": {"default": false, "type": "Boolean", "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_paged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel paged pool."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search in each selected region."}, "scan_kernel_session_pools": {"default": false, "type": "Boolean", "help": "Scan session pools for all processes."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Show device tree.\n", "active_modes": ["mode_windows_memory"], "name": "devicetree"}, {"plugin": "Disassemble", "args": {"end": {"type": "IntParser", "help": "The end address to disassemble up to."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "address_space": {"type": "AddressSpace", "help": "The address space to use."}, "length": {"type": "IntParser", "help": "The number of instructions (lines) to disassemble."}, "mode": {"type": "Choices", "help": "Disassemble Mode (AMD64 or I386). Defaults to 'auto'.", "choices": ["I386", "AMD64", "MIPS"]}, "branch": {"default": false, "type": "Boolean", "help": "If set we follow all branches to cover all code."}, "offset": {"positional": true, "type": "SymbolAddress", "help": "An offset to disassemble. This can also be the name of a symbol with an optional offset. For example: tcpip!TcpCovetNetBufferList."}, "canonical": {"default": false, "type": "Boolean", "help": "If set emit canonical instructions. These can be used to develop signatures."}}, "description": "Disassemble the given offset.\n", "active_modes": [], "name": "dis"}, {"plugin": "DriverIrp", "args": {"regex": {"type": "RegEx", "help": "Analyze drivers matching REGEX"}, "scan_kernel_nonpaged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel non-paged pool."}, "scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "scan_kernel_code": {"default": false, "type": "Boolean", "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_paged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel paged pool."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search in each selected region."}, "scan_kernel_session_pools": {"default": false, "type": "Boolean", "help": "Scan session pools for all processes."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Driver IRP hook detection\n", "active_modes": ["mode_windows_memory"], "name": "driverirp"}, {"plugin": "DriverScan", "args": {"scan_kernel_nonpaged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel non-paged pool."}, "scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "scan_kernel_code": {"default": false, "type": "Boolean", "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_paged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel paged pool."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search in each selected region."}, "scan_kernel_session_pools": {"default": false, "type": "Boolean", "help": "Scan session pools for all processes."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Scan for driver objects _DRIVER_OBJECT\n", "active_modes": ["mode_windows_memory"], "name": "driverscan"}, {"plugin": "Dump", "args": {"width": {"type": "IntParser", "help": "Number of bytes per row"}, "length": {"type": "IntParser", "help": "Maximum length to dump."}, "rows": {"type": "IntParser", "help": "Number of bytes per row"}, "offset": {"default": 0, "positional": true, "type": "SymbolAddress", "help": "An offset to hexdump."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "data": {"type": "String", "help": "Dump this string instead."}, "address_space": {"positional": true, "type": "AddressSpace", "help": "The address space to use."}}, "description": "Hexdump an object or memory location.\n\nYou can use this plugin repeateadely to keep dumping more data using the\n \"p _\" (print last result) operation:\n\nIn [2]: dump 0x814b13b0, address_space=\"K\"\n------> dump(0x814b13b0, address_space=\"K\")\nOffset                         Hex                              Data\n---------- ------------------------------------------------ ----------------\n0x814b13b0 03 00 1b 00 00 00 00 00 b8 13 4b 81 b8 13 4b 81  ..........K...K.\n\nOut[3]: <rekall.plugins.core.Dump at 0x2967510>\n\nIn [4]: p _\n------> p(_)\nOffset                         Hex                              Data\n---------- ------------------------------------------------ ----------------\n0x814b1440 70 39 00 00 54 1b 01 00 18 0a 00 00 32 59 00 00  p9..T.......2Y..\n0x814b1450 6c 3c 01 00 81 0a 00 00 18 0a 00 00 00 b0 0f 06  l<..............\n0x814b1460 00 10 3f 05 64 77 ed 81 d4 80 21 82 00 00 00 00  ..?.dw....!.....", "active_modes": [], "name": "dump"}, {"plugin": "DumpFiles", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}, "file_objects": {"type": "ArrayIntParser", "help": "Kernel addresses of _FILE_OBJECT structs."}}, "description": "Dump files from memory.\n\nThe interface is loosely based on the Volatility plugin of the same name,\nalthough the implementation is quite different.", "active_modes": ["mode_windows_memory"], "name": "dumpfiles"}, {"plugin": "DwarfParser", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "dwarf_filename": {"positional": true, "required": true, "type": "String", "help": "The filename of the PDB file."}, "profile_class": {"default": "Linux64", "type": "String", "help": "The name of the profile implementation. "}}, "description": "Parse the dwarf file and dump a vtype structure from it.\n", "active_modes": [], "name": "dwarfparser"}, {"plugin": "EATHooks", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Detect EAT hooks in process and kernel memory\n", "active_modes": ["mode_windows_memory"], "name": "hooks_eat"}, {"plugin": "EWFAcquire", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "destination": {"positional": true, "type": "String", "help": "The destination file to create. If not specified we write output.E01 in current directory."}}, "description": "Copy the physical address space to an EWF file.\n", "active_modes": [], "name": "ewfacquire"}, {"plugin": "EnumerateVacbs", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Enumerate all blocks cached in the cache manager.\n", "active_modes": ["mode_windows_memory"], "name": "vacbs"}, {"plugin": "EvtLogs", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Extract Windows Event Logs (XP/2003 only)\n", "active_modes": ["mode_windows_memory", "mode_xp"], "name": "evtlogs"}, {"plugin": "Explain", "args": {"query": {"positional": true, "required": true, "type": "String", "help": "The dotty/EFILTER query to run."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "query_parameters": {"type": "ArrayString", "help": "Positional parameters for parametrized queries."}}, "description": "Prints various information about a query.\n\nExplains how a query was parsed and how it will be interpreted. It also\nruns a full type inferencer, to attempt to determine the output of the\nquery once it's executed.\n\nThe Explain plugin can analyse a strict superset of expressions that\nare valid in the Search plugin. It supports:\n\n - Any search query that can be passed to Search.\n - Expressions asking about types and members of profile types\n   (like structs).", "active_modes": [], "name": "explain"}, {"plugin": "FLS", "args": {"path": {"default": "/", "positional": true, "type": "String", "help": "Path to print stats for."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "\n", "active_modes": ["mode_ntfs"], "name": "fls"}, {"plugin": "FStat", "args": {"path": {"default": "/", "positional": true, "type": "String", "help": "Path to print stats for."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Print information by filename.\n", "active_modes": ["mode_ntfs"], "name": "fstat"}, {"plugin": "FetchPDB", "args": {"pdb_filename": {"positional": true, "required": true, "type": "String", "help": "The filename of the executable to get the PDB file for."}, "guid": {"positional": true, "type": "String", "help": "The GUID of the pdb file. If provided, the pdb filename must be provided in the --pdb_filename parameter."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}}, "description": "Fetch the PDB file for an executable from the Microsoft PDB server.\n", "active_modes": [], "name": "fetch_pdb"}, {"plugin": "FileScan", "args": {"scan_kernel_nonpaged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel non-paged pool."}, "scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "scan_kernel_code": {"default": false, "type": "Boolean", "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_paged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel paged pool."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search in each selected region."}, "scan_kernel_session_pools": {"default": false, "type": "Boolean", "help": "Scan session pools for all processes."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Scan Physical memory for _FILE_OBJECT pool allocations\n", "active_modes": ["mode_windows_memory"], "name": "filescan"}, {"plugin": "FileYaraScanner", "args": {"paths": {"positional": true, "type": "Array", "help": "Paths to scan."}, "hits": {"default": 10, "type": "IntParser", "help": "Quit after finding this many hits."}, "pre_context": {"default": 0, "type": "IntParser", "help": "Context to print before the hit."}, "string": {"type": "String", "help": "A verbatim string to search for."}, "binary_string": {"type": "String", "help": "A binary string (encoded as hex) to search for. e.g. 000102[1-200]0506"}, "yara_expression": {"type": "String", "help": "If provided we scan for this yara expression."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "yara_file": {"type": "String", "help": "The yara signature file to read."}, "context": {"default": 64, "type": "IntParser", "help": "Context to print after the hit."}}, "description": "Yara scanner which operates on files.\n", "active_modes": ["mode_live"], "name": "file_yara"}, {"plugin": "FindPlugins", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "type_name": {"positional": true, "required": true, "type": "String", "help": "The name of the type we're looking for. E.g.: 'proc' will find psxview, pslist, etc."}, "producers_only": {"type": "Boolean", "help": "Only include producers: plugins that output only this struct and have no side effects."}}, "description": "Find which plugin(s) are available to produce the desired output.\n", "active_modes": [], "name": "which_plugin"}, {"plugin": "FindReferenceAlloc", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "address": {"positional": true, "required": true, "type": "IntParser", "help": "The address to display"}}, "description": "Show allocations that refer to an address.\n", "active_modes": ["mode_windows_memory"], "name": "show_referrer_alloc"}, {"plugin": "Gahti", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Dump the USER handle type information.\n", "active_modes": ["mode_windows_memory"], "name": "gahti"}, {"plugin": "GetSIDs", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Print the SIDs owning each process token.\n", "active_modes": ["mode_windows_memory"], "name": "tokens"}, {"plugin": "GetServiceSids", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Get the names of services in the Registry and return Calculated SID\n", "active_modes": ["mode_windows_memory"], "name": "getservicesids"}, {"plugin": "Grep", "args": {"address_space": {"type": "AddressSpace", "help": "Name of the address_space to search."}, "limit": {"default": 18446744073709551616, "type": "String", "help": "The length of data to search."}, "context": {"default": 20, "type": "IntParser", "help": "Context to print around the hit."}, "keyword": {"positional": true, "type": "ArrayString", "help": "The binary strings to find."}, "offset": {"default": 0, "type": "IntParser", "help": "Start searching from this offset."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Search an address space for keywords.\n", "active_modes": [], "name": "grep"}, {"plugin": "GuessGUID", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "minimal_match": {"default": 1, "type": "IntParser", "help": "The minimal number of comparison points to be considered. Sometimes not all comparison points can be used since they may not be mapped."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "module": {"positional": true, "type": "String", "help": "The name of the module to guess."}}, "description": "Try to guess the exact version of a kernel module by using an index.\n", "active_modes": ["mode_windows_memory"], "name": "guess_guid"}, {"plugin": "Handles", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "named_only": {"type": "Boolean", "help": "Output only handles with a name ."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}, "object_types": {"type": "ArrayStringParser", "help": "Types of objects to show."}}, "description": "Print list of open handles for each process\n", "active_modes": ["mode_windows_memory"], "name": "handles"}, {"plugin": "HeapChunkDumper", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "malloc_par": {"type": "IntParser", "help": "The malloc_par pointer either extracted from the linked ELF binary or from the libc library."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "main_arena": {"type": "IntParser", "help": "The main_arena pointer either extracted from the statically linked ELF binary or from the libc library."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Dumps allocated/freed chunks from selected processes\n", "active_modes": ["mode_linux_memory"], "name": "heapdump"}, {"plugin": "HeapObjects", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "main_arena": {"type": "IntParser", "help": "The main_arena pointer either extracted from the statically linked ELF binary or from the libc library."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "print_mmapped": {"default": false, "type": "Boolean", "help": "prints all MMAPPED chunk structs"}, "print_allocated": {"default": false, "type": "Boolean", "help": "prints all allocated chunk structs"}, "malloc_par": {"type": "IntParser", "help": "The malloc_par pointer either extracted from the linked ELF binary or from the libc library."}, "print_mallinfo": {"default": false, "type": "Boolean", "help": "prints statistic information, similar to glibc's mallinfo"}, "print_freed": {"default": false, "type": "Boolean", "help": "prints all freed chunk structs"}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Prints the structs of heap objects (such as allocated chunks, arenas,\n...)", "active_modes": ["mode_linux_memory"], "name": "heapobjects"}, {"plugin": "HeapOverview", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "main_arena": {"type": "IntParser", "help": "The main_arena pointer either extracted from the statically linked ELF binary or from the libc library."}, "malloc_par": {"type": "IntParser", "help": "The malloc_par pointer either extracted from the linked ELF binary or from the libc library."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Tries to gather a list of all arenas/heaps and all allocated chunks.\n", "active_modes": ["mode_linux_memory"], "name": "heapinfo"}, {"plugin": "HeapPointerSearch", "args": {"regex": {"type": "str", "help": "Searches all chunks with the given regex and prints all hits."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "string": {"type": "str", "help": "Searches all chunks for the given string and prints all hits."}, "search_struct": {"default": false, "type": "Boolean", "help": "Includes the malloc_struct fields in the search process such as size and fd/bk for bin chunks (but not its own prev_size field). This is normally not desired and hence deactivated by default."}, "pointers": {"type": "ArrayIntParser", "help": "Prints chunks that contain exactly the given pointer(s). The pointer(s) can be given as (hexa)decimal numbers."}, "chunk_addresses": {"type": "ArrayIntParser", "help": "Expects address(es) belonging to a chunk(s) of interest, and prints all chunks having a pointer somewhere into the data part of that chunk(s)."}, "main_arena": {"type": "IntParser", "help": "The main_arena pointer either extracted from the statically linked ELF binary or from the libc library."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "malloc_par": {"type": "IntParser", "help": "The malloc_par pointer either extracted from the linked ELF binary or from the libc library."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Searches all chunks for the given string, regex or pointer(s).\n", "active_modes": ["mode_linux_memory"], "name": "heapsearch"}, {"plugin": "HeapReferenceSearch", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "chunk_addresses": {"type": "ArrayIntParser", "help": "The address(es) belonging to chunks of interest. Those chunks are then examined for references to other chunks."}, "main_arena": {"type": "IntParser", "help": "The main_arena pointer either extracted from the statically linked ELF binary or from the libc library."}, "malloc_par": {"type": "IntParser", "help": "The malloc_par pointer either extracted from the linked ELF binary or from the libc library."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Examines the data part of the given chunk for references to other\nchunks.", "active_modes": ["mode_linux_memory"], "name": "heaprefs"}, {"plugin": "HiveDump", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Prints out a hive\n", "active_modes": ["mode_windows_memory"], "name": "hivedump"}, {"plugin": "Hives", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "List all the registry hives on the system.\n", "active_modes": ["mode_windows_memory"], "name": "hives"}, {"plugin": "Hostname", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for those plugins requiring a physical address space.\n\nArgs:\n  physical_address_space: The physical address space to use. If not\n    specified we use the following options:\n\n    1) session.physical_address_space,\n\n    2) Guess using the load_as() plugin,\n\n    3) Use session.kernel_address_space.base.", "active_modes": ["mode_linux_memory"], "name": "hostname"}, {"plugin": "IATHooks", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Detect IAT/EAT hooks in process and kernel memory\n", "active_modes": ["mode_windows_memory"], "name": "hooks_iat"}, {"plugin": "IDump", "args": {"mft": {"default": 5, "positional": true, "required": true, "type": "IntParser", "help": "MFT entry to dump."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "type": {"default": 128, "positional": true, "type": "IntParser", "help": "Attribute type to dump."}, "id": {"positional": true, "type": "IntParser", "help": "Id of attribute to dump."}}, "description": "Dump a part of an MFT file.\n", "active_modes": ["mode_ntfs"], "name": "idump"}, {"plugin": "IExport", "args": {"mft": {"default": 5, "positional": true, "required": true, "type": "IntParser", "help": "MFT entry to dump."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "type": {"default": 128, "positional": true, "type": "IntParser", "help": "Attribute type to dump."}, "id": {"positional": true, "type": "IntParser", "help": "Id of attribute to dump."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}}, "description": "Extracts files from NTFS.\n\nFor each specified MFT entry, dump the file to the specified dump\ndirectory. The filename is taken as the longest filename of this MFT entry.", "active_modes": ["mode_ntfs"], "name": "iexport"}, {"plugin": "ILS", "args": {"mfts": {"default": [5], "positional": true, "type": "ArrayIntParser", "help": "MFT entries to list."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "List files in an NTFS image.\n", "active_modes": ["mode_ntfs"], "name": "ils"}, {"plugin": "IOmem", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "mimics /proc/iomem.\n", "active_modes": ["mode_linux_memory"], "name": "iomem"}, {"plugin": "IRDump", "args": {"rows": {"default": 4, "type": "IntParser", "help": "Number of bytes per row"}, "start": {"default": 0, "type": "IntParser", "help": "An offset to hexdump."}, "globs": {"positional": true, "type": "ArrayString", "help": "List of globs to return."}, "case_insensitive": {"default": true, "type": "Bool", "help": "Globs will be case insensitive."}, "width": {"default": 24, "type": "IntParser", "help": "Number of bytes per row"}, "length": {"default": 100, "type": "IntParser", "help": "Maximum length to dump."}, "path_sep": {"type": "String", "help": "Path separator character (/ or \\)"}, "filesystem": {"default": "API", "type": "Choices", "help": "The virtual filesystem implementation to glob in.", "choices": ["API"]}, "root": {"type": "String", "help": "Root directory to glob from."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Hexdump files from disk.\n", "active_modes": ["mode_live"], "name": "hexdump_file"}, {"plugin": "IRFind", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "root": {"positional": true, "type": "String", "help": "The root directory to start search from."}}, "description": "List files recursively from a root path.\n", "active_modes": ["mode_live"], "name": "find"}, {"plugin": "IRGlob", "args": {"path_sep": {"type": "String", "help": "Path separator character (/ or \\)"}, "filesystem": {"default": "API", "type": "Choices", "help": "The virtual filesystem implementation to glob in.", "choices": ["API"]}, "root": {"type": "String", "help": "Root directory to glob from."}, "case_insensitive": {"default": true, "type": "Bool", "help": "Globs will be case insensitive."}, "globs": {"positional": true, "type": "ArrayString", "help": "List of globs to return."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Search for files by filename glob.\n\nThis code roughly based on the Glob flow in GRR.", "active_modes": ["mode_live"], "name": "glob"}, {"plugin": "IRHash", "args": {"paths": {"positional": true, "type": "Array", "help": "Paths to hash."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "hash": {"default": ["sha1"], "type": "ChoiceArray", "help": "One or more hashes to calculate.", "choices": ["md5", "sha1", "sha256"]}}, "description": "\n", "active_modes": ["mode_live"], "name": "hash"}, {"plugin": "IRMaps", "args": {"regex": {"type": "RegEx", "help": "A regular expression to filter VAD filenames."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "verbosity": {"default": 1, "type": "IntParser", "help": "With high verbosity print more information on each region."}, "offset": {"type": "SymbolAddress", "help": "Only print the vad corresponding to this offset."}}, "description": "Examine the process memory maps.\n", "active_modes": ["mode_live_api"], "name": "maps"}, {"plugin": "IRStat", "args": {"paths": {"positional": true, "type": "Array", "help": "Paths to hash."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "\n", "active_modes": ["mode_live"], "name": "stat"}, {"plugin": "IRVadDump", "args": {"regex": {"type": "RegEx", "help": "A regular expression to filter VAD filenames."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "offset": {"type": "SymbolAddress", "help": "Only print the vad corresponding to this offset."}, "verbosity": {"default": 1, "type": "IntParser", "help": "With high verbosity print more information on each region."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}}, "description": "Dump the VMA memory for a process.\n", "active_modes": ["mode_live_api"], "name": "vaddump"}, {"plugin": "IStat", "args": {"mfts": {"default": [5], "positional": true, "type": "ArrayIntParser", "help": "MFT entries to list."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Print information related to an MFT entry.\n", "active_modes": ["mode_ntfs"], "name": "istat"}, {"plugin": "Ifconfig", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Gathers active interfaces.\n", "active_modes": ["mode_linux_memory"], "name": "ifconfig"}, {"plugin": "ImageCopy", "description": "Copies a physical address space out as a raw DD image\n", "name": "imagecopy", "active_modes": []}, {"plugin": "ImageInfo", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "List overview information about this image.\n", "active_modes": ["mode_windows_memory"], "name": "imageinfo"}, {"plugin": "ImpScan", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Scan for calls to imported functions.\n", "active_modes": ["mode_windows_memory"], "name": "impscan"}, {"plugin": "Info", "description": "Print information about various subsystems.\n", "name": "info", "active_modes": []}, {"plugin": "InlineHooks", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Detect API hooks in process and kernel memory\n", "active_modes": ["mode_windows_memory"], "name": "hooks_inline"}, {"plugin": "InspectHeap", "args": {"heaps": {"type": "ArrayIntParser", "help": "Only show these heaps (default show all)"}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "free": {"type": "Boolean", "help": "Also show freed chunks."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Inspect the process heap.\n\nThis prints a lot of interesting facts about the process heap. It is also\nthe foundation to many other plugins which find things in the process heaps.\n\nNOTE: Currently we only support Windows 7 64 bit.", "active_modes": ["mode_amd64", "mode_windows_memory"], "name": "inspect_heap"}, {"plugin": "InteractiveShell", "description": "An interactive shell for Rekall.\n", "name": "shell", "active_modes": []}, {"plugin": "JSONParser", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "file": {"positional": true, "required": true, "type": "String", "help": "The filename to parse."}}, "description": "Renders a json rendering file, as produced by the JsonRenderer.\n\nThe output of any plugin can be stored to a JSON file using:\n\nrekall -f img.dd --format json plugin_name --output test.json\n\nThen it can be rendered again using:\n\nrekall json_render test.json\n\nThis plugin implements the proper decoding of the JSON encoded output.", "active_modes": [], "name": "json_render"}, {"plugin": "KDBGScan", "args": {"full_scan": {"type": "Boolean", "help": "Scan the full address space."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Scan for possible _KDDEBUGGER_DATA64 structures.\n\nThe scanner is detailed here:\nhttp://moyix.blogspot.com/2008/04/finding-kernel-global-variables-in.html\n\nThe relevant structures are detailed here:\nhttp://doxygen.reactos.org/d3/ddf/include_2psdk_2wdbgexts_8h_source.html\n\nWe can see that _KDDEBUGGER_DATA64.Header is:\n\ntypedef struct _DBGKD_DEBUG_DATA_HEADER64 {\n    LIST_ENTRY64    List;\n    ULONG           OwnerTag;\n    ULONG           Size;\n}\n\nWe essentially search for an owner tag of \"KDBG\", then overlay the\n_KDDEBUGGER_DATA64 struct on it. We test for validity by reflecting\nthrough the Header.List member.", "active_modes": ["mode_windows_memory"], "name": "kdbgscan"}, {"plugin": "KPCR", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A plugin to print all KPCR blocks.\n", "active_modes": ["mode_windows_memory"], "name": "kpcr"}, {"plugin": "Keepassx", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "main_arena": {"type": "IntParser", "help": "The main_arena pointer either extracted from the statically linked ELF binary or from the libc library."}, "malloc_par": {"type": "IntParser", "help": "The malloc_par pointer either extracted from the linked ELF binary or from the libc library."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Gathers password entries for keepassx.\nThe retrieved content of those entries comprises the username, title, URL\nand Comment.", "active_modes": ["mode_linux_memory"], "name": "keepassx"}, {"plugin": "LdrModules", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Detect unlinked DLLs\n", "active_modes": ["mode_windows_memory"], "name": "ldrmodules"}, {"plugin": "LinMemDump", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Dump the addressable memory for a process.\n", "active_modes": ["mode_linux_memory"], "name": "memdump"}, {"plugin": "LinMemMap", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Dumps the memory map for linux tasks.\n", "active_modes": ["mode_linux_memory"], "name": "memmap"}, {"plugin": "LinPSTree", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Shows the parent/child relationship between processes.\n\nThis plugin prints a parent/child relationship tree by walking the\ntask_struct.children and task_struct.sibling members.", "active_modes": ["mode_linux_memory"], "name": "pstree"}, {"plugin": "LinPas2Vas", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "offsets": {"type": "ArrayIntParser", "help": "A list of physical offsets to resolve."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Resolves a physical address to a virtual addrress in a process.\n", "active_modes": ["mode_linux_memory"], "name": "pas2vas"}, {"plugin": "LinVadDump", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Dump the VMA memory for a process.\n", "active_modes": ["mode_linux_memory"], "name": "vaddump"}, {"plugin": "LinVtoP", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Describe virtual to physical translation on Linux platforms.\n", "active_modes": ["mode_linux_memory"], "name": "vtop"}, {"plugin": "LinYaraScan", "args": {"scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "pre_context": {"default": 0, "type": "IntParser", "help": "Context to print before the hit."}, "string": {"type": "String", "help": "A verbatim string to search for."}, "binary_string": {"type": "String", "help": "A binary string (encoded as hex) to search for. e.g. 000102[1-200]0506"}, "yara_expression": {"type": "String", "help": "If provided we scan for this yara expression."}, "yara_file": {"type": "String", "help": "The yara signature file to read."}, "hits": {"default": 10, "type": "IntParser", "help": "Quit after finding this many hits."}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "context": {"default": 64, "type": "IntParser", "help": "Context to print after the hit."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Scan using yara signatures.\n", "active_modes": ["mode_linux_memory"], "name": "yarascan"}, {"plugin": "LinuxAPIAddressResolver", "args": {"symbol": {"default": [], "type": "ArrayString", "help": "List of symbols to lookup"}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A Linux specific address resolver plugin.\n", "active_modes": ["mode_live_api"], "name": "address_resolver"}, {"plugin": "LinuxAddressResolver", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "symbol": {"default": [], "type": "ArrayString", "help": "List of symbols to lookup"}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A Linux specific address resolver plugin.\n", "active_modes": ["mode_linux_memory"], "name": "address_resolver"}, {"plugin": "LinuxDmesg", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Gathers dmesg buffer.\n", "active_modes": ["mode_linux_memory"], "name": "dmesg"}, {"plugin": "LinuxFindDTB", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A scanner for DTB values. Handles both 32 and 64 bits.\n\nThe plugin also autodetects when the guest is running as a XEN\nParaVirtualized guest and returns a compatible address space.", "active_modes": ["mode_linux_memory"], "name": "find_dtb"}, {"plugin": "LinuxPsList", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Gathers active tasks by walking the task_struct->task list.\n\nIt does not display the swapper process. If the DTB column is blank, the\nitem is likely a kernel thread.", "active_modes": ["mode_linux_memory"], "name": "pslist"}, {"plugin": "LinuxPsxView", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask", "PidHashTable"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["InitTask", "PidHashTable"]}}, "description": "Find hidden processes comparing various process listings.\n", "active_modes": ["mode_linux_memory"], "name": "psxview"}, {"plugin": "LinuxSetProcessContext", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "A cc plugin for windows.\n", "active_modes": ["mode_linux_memory"], "name": "cc"}, {"plugin": "LinuxSigScan", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Runs a signature scans against physical, kernel or process memory.\n", "active_modes": ["mode_linux_memory"], "name": "sigscan"}, {"plugin": "LinuxVADMap", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "end": {"default": 9223372036854775808, "type": "IntParser", "help": "Stop reading at this offset."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "start": {"default": 0, "type": "IntParser", "help": "Start reading from this page."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Inspect each page in the VAD and report its status.\n\nThis allows us to see the address translation status of each page in the\nVAD.", "active_modes": ["mode_linux_memory"], "name": "vadmap"}, {"plugin": "Lister", "description": "A plugin to list objects.\n", "name": "l", "active_modes": []}, {"plugin": "Live", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "mode": {"default": "Memory", "type": "Choices", "help": "Mode for live analysis.", "choices": ["API", "Memory"]}}, "description": "Launch a Rekall shell for live analysis on the current system.\n", "active_modes": [], "name": "live"}, {"plugin": "LoadAddressSpace", "description": "Load address spaces into the session if its not already loaded.\n", "name": "load_as", "active_modes": []}, {"plugin": "LoadPlugins", "description": "Load user provided plugins.\n\nThis probably is only useful after the interactive shell started since you\ncan already use the --plugin command line option.", "name": "load_plugin", "active_modes": []}, {"plugin": "LoadWindowsProfile", "args": {"module_name": {"positional": true, "required": true, "type": "String", "help": "The name of the module (without the .pdb extensilon)."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "guid": {"type": "String", "help": "The guid of the module."}}, "description": "Loads the profile into the session.\n\nIf the profile does not exist in the repositories, fetch and build it from\nthe symbol server. This plugin allows the user to change resolution of\nselected binaries by forcing the fetching of symbol files from the symbol\nserver interactively.", "active_modes": ["mode_windows_memory"], "name": "load_profile"}, {"plugin": "Lookup", "args": {"target_args": {"positional": true, "type": "String", "help": "The target args"}, "constant": {"positional": true, "required": true, "type": "String", "help": "The constant to look up in the profile."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "target": {"positional": true, "type": "String", "help": "The type of the constant."}}, "description": "Lookup a global in the profile.\n\nThis plugin lets the user ask for a specific global constant in the\nactive profile.", "active_modes": [], "name": "lookup"}, {"plugin": "Lsmod", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Gathers loaded kernel modules.\n", "active_modes": ["mode_linux_memory"], "name": "lsmod"}, {"plugin": "LsmodSections", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Display all the ELF sections of kernel modules.\n", "active_modes": ["mode_linux_memory"], "name": "lsmod_sections"}, {"plugin": "Lsmod_parameters", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Display parameters for all kernel modules.\n", "active_modes": ["mode_linux_memory"], "name": "lsmod_parameters"}, {"plugin": "Lsof", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Lists open files.\n", "active_modes": ["mode_linux_memory"], "name": "lsof"}, {"plugin": "Malfind", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Find hidden and injected code\n", "active_modes": ["mode_windows_memory"], "name": "malfind"}, {"plugin": "ManageRepository", "args": {"executable": {"type": "String", "help": "The path to the rekall binary. This is used for spawning multiple processes."}, "build_target": {"positional": true, "type": "StringParser", "help": "A single target to build."}, "force_build_index": {"default": false, "type": "Boolean", "help": "Forces building the index."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "builder_args": {"positional": true, "type": "ArrayStringParser", "help": "Optional args for the builder."}, "path_to_repository": {"default": ".", "type": "String", "help": "The path to the profile repository"}, "processes": {"default": 1, "type": "IntParser", "help": "Number of concurrent workers."}}, "description": "Manages the profile repository.\n", "active_modes": [], "name": "manage_repo"}, {"plugin": "Mcat", "args": {"device": {"type": "String", "help": "Name of the device to match."}, "path": {"default": "/", "positional": true, "type": "String", "help": "Path to the file."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}}, "description": "Returns the contents available in memory for a given file.\n\nRanges of the file that are not present in memory are returned blank.", "active_modes": ["mode_linux_memory"], "name": "mcat"}, {"plugin": "MemoryTranslation", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "address": {"positional": true, "required": true, "type": "SymbolAddress", "help": "Virtual address to inspect."}}, "description": "Inspect the mapping of a virtual address.\n", "active_modes": [], "name": "inspect_vaddr"}, {"plugin": "Mfind", "args": {"device": {"type": "String", "help": "Name of the device to match."}, "path": {"default": "/", "positional": true, "type": "String", "help": "Path to the file."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}}, "description": "Finds a file by name in memory.\n", "active_modes": ["mode_linux_memory"], "name": "mfind"}, {"plugin": "MftDump", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Enumerate MFT entries from the cache manager.\n", "active_modes": ["mode_windows_memory"], "name": "mftdump"}, {"plugin": "Mimikatz", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Extract and decrypt passwords from the LSA Security Service.\n", "active_modes": ["mode_windows_memory"], "name": "mimikatz"}, {"plugin": "Mls", "args": {"recursive": {"type": "Boolean", "help": "Recursive listing"}, "unallocated": {"type": "Boolean", "help": "Show files that have no inode information."}, "device": {"type": "String", "help": "Name of the device to match."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "path": {"default": "/", "positional": true, "type": "String", "help": "Path to the file."}}, "description": "Lists the files in a mounted filesystem.\n", "active_modes": ["mode_linux_memory"], "name": "mls"}, {"plugin": "ModDump", "args": {"regex": {"default": ".", "type": "RegEx", "help": "A Regular expression for selecting the dlls to dump."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "out_fd": {"type": "String", "help": "A file like object to write the output."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Dump kernel drivers from kernel space.\n", "active_modes": ["mode_windows_memory"], "name": "moddump"}, {"plugin": "ModScan", "args": {"scan_kernel_nonpaged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel non-paged pool."}, "scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "scan_kernel_code": {"default": false, "type": "Boolean", "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_paged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel paged pool."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search in each selected region."}, "scan_kernel_session_pools": {"default": false, "type": "Boolean", "help": "Scan session pools for all processes."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Scan Physical memory for _LDR_DATA_TABLE_ENTRY objects.\n", "active_modes": ["mode_windows_memory"], "name": "modscan"}, {"plugin": "ModVersions", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "name_regex": {"type": "RegEx", "help": "Filter module names by this regex."}}, "description": "Try to determine the versions for all kernel drivers.\n", "active_modes": ["mode_windows_memory"], "name": "version_modules"}, {"plugin": "Moddump", "args": {"regexp": {"type": "RegEx", "help": "Regexp on the module name."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "dump_dir": {"required": true, "type": "String", "help": "Dump directory."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}}, "description": "Dumps loaded kernel modules.\n", "active_modes": ["mode_linux_memory"], "name": "moddump"}, {"plugin": "Modules", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "name_regex": {"type": "RegEx", "help": "Filter module names by this regex."}}, "description": "Print list of loaded kernel modules.\n", "active_modes": ["mode_windows_memory"], "name": "modules"}, {"plugin": "Mount", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Lists the mount points.\n", "active_modes": ["mode_linux_memory"], "name": "mount"}, {"plugin": "MutantScan", "args": {"scan_kernel_nonpaged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel non-paged pool."}, "scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "scan_kernel_code": {"default": false, "type": "Boolean", "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_paged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel paged pool."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search in each selected region."}, "scan_kernel_session_pools": {"default": false, "type": "Boolean", "help": "Scan session pools for all processes."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Scan for mutant objects _KMUTANT\n", "active_modes": ["mode_windows_memory"], "name": "mutantscan"}, {"plugin": "Netstat", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Print the active network connections.\n", "active_modes": ["mode_linux_memory"], "name": "netstat"}, {"plugin": "NotifierChainPlugin", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Outputs and verifies kernel notifier chains.\n", "active_modes": ["mode_linux_memory"], "name": "notifier_chains"}, {"plugin": "Null", "description": "This plugin does absolutely nothing.\n\nIt is used to measure startup overheads.", "name": "null", "active_modes": []}, {"plugin": "OSQuery", "args": {"osquery_path": {"type": "String", "help": "The path to the osquery binary (default osqueryi)."}, "query": {"positional": true, "type": "String", "help": "The OSQuery query to run."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Runs the OSQuery query and emit the results.\n\nNote that the columns emitted depend on osquery itself so we can\nnot predict in advance the table format.", "active_modes": ["mode_live"], "name": "osquery"}, {"plugin": "ObjectTree", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "type_regex": {"default": ".", "type": "RegEx", "help": "Filter the type of objects shown."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Visualize the kernel object tree.\n\nRef:\nhttp://msdn.microsoft.com/en-us/library/windows/hardware/ff557762(v=vs.85).aspx", "active_modes": ["mode_windows_memory"], "name": "object_tree"}, {"plugin": "Objects", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Displays all object Types on the system.\n", "active_modes": ["mode_windows_memory"], "name": "object_types"}, {"plugin": "PEAddressResolver", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "symbol": {"default": [], "type": "ArrayString", "help": "List of symbols to lookup"}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A simple address resolver for PE files.\n", "active_modes": [], "name": "address_resolver"}, {"plugin": "PEDump", "args": {"address_space": {"type": "AddressSpace", "help": "The address space to use."}, "image_base": {"positional": true, "type": "SymbolAddress", "help": "The address of the image base (dos header)."}, "out_file": {"type": "String", "help": "The file name to write."}, "out_fd": {"type": "String", "help": "A file like object to write the output."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Dump a PE binary from memory.\n", "active_modes": ["mode_windows_memory"], "name": "pedump"}, {"plugin": "PEInfo", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "image_base": {"positional": true, "type": "SymbolAddress", "help": "The base of the image."}, "executable": {"positional": true, "type": "String", "help": "If provided we create an address space from this file."}, "address_space": {"type": "String", "help": "The address space to use."}}, "description": "Print information about a PE binary.\n", "active_modes": [], "name": "peinfo"}, {"plugin": "PFNInfo", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pfn": {"positional": true, "required": true, "type": "IntParser", "help": "The PFN to examine."}}, "description": "Prints information about an address from the PFN database.\n", "active_modes": ["mode_windows_memory"], "name": "pfn"}, {"plugin": "PSAux", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Gathers processes along with full command line and start time.\n", "active_modes": ["mode_linux_memory"], "name": "psaux"}, {"plugin": "PSScan", "args": {"scan_kernel_nonpaged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel non-paged pool."}, "scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "scan_kernel_code": {"default": false, "type": "Boolean", "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_paged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel paged pool."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search in each selected region."}, "scan_kernel_session_pools": {"default": false, "type": "Boolean", "help": "Scan session pools for all processes."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Scan Physical memory for _EPROCESS pool allocations.\n\nStatus flags:\n  E: A known _EPROCESS address from pslist.\n  P: A known pid from pslist.", "active_modes": ["mode_windows_memory"], "name": "psscan"}, {"plugin": "PSTree", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Print process list as a tree\n", "active_modes": ["mode_windows_memory"], "name": "pstree"}, {"plugin": "PacketQueues", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Dumps the current packet queues for all known open sockets.\n", "active_modes": ["mode_linux_memory"], "name": "pkt_queues"}, {"plugin": "Pagefiles", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Report all the active pagefiles.\n", "active_modes": ["mode_windows_memory"], "name": "pagefiles"}, {"plugin": "ParsePDB", "args": {"windows_version": {"type": "String", "help": "The windows version (major.minor.revision) corresponding with this PDB. For example, Windows 7 should be given as 6.1"}, "pdb_filename": {"positional": true, "required": true, "type": "String", "help": "The filename of the PDB file."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "concise": {"type": "Boolean", "help": "Specify this to emit less detailed information."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "profile_class": {"type": "String", "help": "The name of the profile implementation. Default name is derived from the pdb filename."}, "output_filename": {"type": "String", "help": "The name of the file to store this profile. "}}, "description": "Parse the PDB streams.\n", "active_modes": [], "name": "parse_pdb"}, {"plugin": "PidHashTable", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "List processes by enumerating the pid hash tables.\n", "active_modes": ["mode_linux_memory"], "name": "pidhashtable"}, {"plugin": "PoolTracker", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Enumerate pool tag usage statistics.\n", "active_modes": ["mode_windows_memory"], "name": "pool_tracker"}, {"plugin": "Pools", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Prints information about system pools.\n\nRef:\nhttp://illmatics.com/Windows%208%20Heap%20Internals.pdf\nhttps://media.blackhat.com/bh-dc-11/Mandt/BlackHat_DC_2011_Mandt_kernelpool-wp.pdf\nhttps://immunityinc.com/infiltrate/archives/kernelpool_infiltrate2011.pdf\nhttp://gate.upm.ro/os/LABs/Windows_OS_Internals_Curriculum_Resource_Kit-ACADEMIC/WindowsResearchKernel-WRK/WRK-v1.2/base/ntos/ex/pool.c", "active_modes": ["mode_windows_memory"], "name": "pools"}, {"plugin": "PrintKey", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Print a registry key, and its subkeys and values\n", "active_modes": ["mode_windows_memory"], "name": "printkey"}, {"plugin": "Printer", "description": "A plugin to print an object.\n", "name": "p", "active_modes": []}, {"plugin": "Privileges", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Prints process privileges.\n", "active_modes": ["mode_windows_memory"], "name": "privileges"}, {"plugin": "ProcExeDump", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "out_fd": {"type": "String", "help": "A file like object to write the output."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Dump a process to an executable file sample\n", "active_modes": ["mode_windows_memory"], "name": "procdump"}, {"plugin": "ProcInfo", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Dump detailed information about a running process.\n", "active_modes": ["mode_windows_memory"], "name": "procinfo"}, {"plugin": "ProcMaps", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Gathers process maps for linux.\n", "active_modes": ["mode_linux_memory"], "name": "maps"}, {"plugin": "ProcessYaraScanner", "args": {"hits": {"default": 10, "type": "IntParser", "help": "Quit after finding this many hits."}, "pre_context": {"default": 0, "type": "IntParser", "help": "Context to print before the hit."}, "string": {"type": "String", "help": "A verbatim string to search for."}, "binary_string": {"type": "String", "help": "A binary string (encoded as hex) to search for. e.g. 000102[1-200]0506"}, "yara_expression": {"type": "String", "help": "If provided we scan for this yara expression."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "yara_file": {"type": "String", "help": "The yara signature file to read."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "context": {"default": 64, "type": "IntParser", "help": "Context to print after the hit."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}}, "description": "Yara scan process memory using the ReadProcessMemory() API.\n", "active_modes": ["mode_live_api"], "name": "yarascan"}, {"plugin": "PtoV", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "physical_address": {"positional": true, "type": "IntParser", "help": "The Virtual Address to examine."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Converts a physical address to a virtual address.\n", "active_modes": ["mode_windows_memory"], "name": "ptov"}, {"plugin": "RaisingTheRoof", "description": "A plugin that exists to break your tests and make you cry.\n", "name": "raise_the_roof", "active_modes": []}, {"plugin": "Raw2Dump", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "rebuild": {"type": "Boolean", "help": "Rebuild the KDBG data block."}, "destination": {"positional": true, "required": true, "type": "String", "help": "The destination path to write the crash dump."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Convert the physical address space to a crash dump.\n\nThe Windows debugger (Windbg) works only with memory dumps stored\nin the proprietary 'crashdump' file format. This file format\ncontains the following features:\n\n1) Physical memory ranges are stored in a sparse way - there is a\n   'Runs' table which specifies the mapping between the physical\n   offset and the file offset of each page. This allows the format\n   to omit unmapped regions (unlike raw format which must pad them\n   with zero to maintain alignment).\n\n2) The crash dump header contains metadata about the\n   image. Specifically, the header contain a copy of the Kernel\n   Debugger Data Block (AKA the KDBG). This data is used to\n   bootstrap the windows debugger by providing critical initial\n   hints to the debugger.\n\nSince the KDBG block is created at system boot and never used\n(until the crash dump is written) it is trivial for malware to\noverwrite it - making it really hard for responders since windbg\nwill not be able to read the file. In later versions of windows,\nthe kdbg is also obfuscated (See the function \"nt!KdCopyDataBlock\"\nwhich decrypts it.).\n\nRekall itself does not use the KDBG block any more, although older\nmemory forensic tools still do use it. Rekall instead relies on\naccurate debugging symbols to locate critical kernel data\nstructures, reducing the level of trust we place on the image\nitself (so Rekall is more resilient to manipulation).\n\nIn order to ensure that the windows debugger is able to read the\nproduced crash dump, we recreate the kernel debugger block from\nthe symbol information we already have.\n\nNOTE: The crashdump file format can be deduced by:\n\ndis 'nt!IoFillDumpHeader'\n\nThis is the reference for this plugin.", "active_modes": ["mode_windows_memory"], "name": "raw2dmp"}, {"plugin": "RegDump", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}}, "description": "Dump all registry hives from memory into a dump directory.\n", "active_modes": ["mode_windows_memory"], "name": "regdump"}, {"plugin": "RekallAgent", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "The Rekall DFIR Agent.\n", "active_modes": ["mode_agent"], "name": "agent"}, {"plugin": "RekallBovineExperience3000", "description": "Renders Bessy the cow and some beer.\n\nThis is a text renderer stress-test. It uses multiple features at the\nsame time:\n\n- Multiple coloring rules per line (this was a doozy).\n- Two columns with colors next to each other.\n- Text with its own newlines isn't rewrapped.\n- It still wraps if it overflows the cell.\n- Bovine readiness and international spirit.", "name": "moo", "active_modes": []}, {"plugin": "Run", "description": "A plugin which runs its argument (using eval).\n\nNote: This plugin is only defined and available when using the main entry\npoint. It is not available when Rekall is used as a library since it allows\narbitrary code execution.", "name": "run", "active_modes": []}, {"plugin": "RunFlow", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "flow": {"positional": true, "type": "String", "help": "A string encoding a Flow JSON object."}, "flow_filename": {"type": "String", "help": "A filename containing an encoded Flow JSON object."}}, "description": "Run the flows specified.\n", "active_modes": [], "name": "run_flow"}, {"plugin": "Search", "args": {"query": {"positional": true, "required": true, "type": "String", "help": "The dotty/EFILTER query to run."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "silent": {"default": false, "type": "Boolean", "help": "Queries should fail silently."}, "query_parameters": {"type": "ArrayString", "help": "Positional parameters for parametrized queries."}}, "description": "Searches and recombines output of other plugins.\n\nSearch allows you to use the EFILTER search engine to filter, transform\nand combine output of most Rekall plugins. The most common use for this\nis running IOCs.\n\nSome examples that work right now:\n==================================\n\n# Find the process with pid 1:\nsearch(\"select * pslist() where proc.pid == 1\")\n\n# Sort lsof output by file descriptor:\nsearch(\"sort(lsof(), fd)\") # or:\nsearch(\"select * from lsof() order by fd)\")\n\n# Filter and sort through lsof in one step:\nsearch(\"select * from lsof() where proc.pid == 1 order by fd)\n\n# Is there any proc with PID 1, that has a TCPv6 connection and isn't a\n# dead process?\nsearch(\"(any lsof where (proc.pid == 1 and fileproc.human_type == 'TCPv6'))\n         and not (any dead_procs where (proc.pid == 1))\")\n\n# Note: \"ANY\" is just a short hand for \"SELECT ANY FROM\" which does what\n# it sounds like, and returns True or False depending on whether the\n# query has any results.", "active_modes": [], "name": "search"}, {"plugin": "Services", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Enumerate all services.\n", "active_modes": ["mode_windows_memory"], "name": "services"}, {"plugin": "SessionDelete", "description": "Delete a session.\n", "name": "sdel", "active_modes": []}, {"plugin": "SessionList", "description": "List the sessions available.\n", "name": "slist", "active_modes": []}, {"plugin": "SessionMod", "description": "Modifies parameters of the current analysis session.\n\nAny session parameters can be set here. For example:\n\nsmod colors=\"no\", paging_limit=10, pager=\"less\"", "name": "smod", "active_modes": []}, {"plugin": "SessionNew", "description": "Creates a new session by cloning the current one.\n", "name": "snew", "active_modes": []}, {"plugin": "SessionSwitch", "description": "Changes the current session to the session with session_id.\n", "name": "sswitch", "active_modes": []}, {"plugin": "Sessions", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "List details on _MM_SESSION_SPACE (user logon sessions).\n\nWindows uses sessions in order to separate processes. Sessions are used to\nseparate the address spaces of windows processes.\n\nNote that this plugin traverses the ProcessList member of the session object\nto list the processes - yet another list _EPROCESS objects are on.", "active_modes": ["mode_windows_memory"], "name": "sessions"}, {"plugin": "SetPartitionContext", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "partition_number": {"positional": true, "type": "IntParser", "help": "The partition to switch to."}}, "description": "A mixin for those plugins requiring a physical address space.\n\nArgs:\n  physical_address_space: The physical address space to use. If not\n    specified we use the following options:\n\n    1) session.physical_address_space,\n\n    2) Guess using the load_as() plugin,\n\n    3) Use session.kernel_address_space.base.", "active_modes": ["mode_tsk"], "name": "cc"}, {"plugin": "ShimCacheMem", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Extract the Application Compatibility Shim Cache from kernel memory.\n", "active_modes": ["mode_windows_memory"], "name": "shimcachemem"}, {"plugin": "ShowAllocation", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "length": {"default": 800, "type": "IntParser", "help": "How many bytes after the address to display."}, "preamble": {"default": 32, "type": "IntParser", "help": "How many bytes prior to the address to display."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "address": {"positional": true, "type": "ArrayIntParser", "help": "The address to display"}}, "description": "Show the allocation containing the address.\n", "active_modes": ["mode_windows_memory"], "name": "show_allocation"}, {"plugin": "SimpleYaraScan", "args": {"hits": {"default": 10, "type": "IntParser", "help": "Quit after finding this many hits."}, "pre_context": {"default": 0, "type": "IntParser", "help": "Context to print before the hit."}, "string": {"type": "String", "help": "A verbatim string to search for."}, "binary_string": {"type": "String", "help": "A binary string (encoded as hex) to search for. e.g. 000102[1-200]0506"}, "yara_expression": {"type": "String", "help": "If provided we scan for this yara expression."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "yara_file": {"type": "String", "help": "The yara signature file to read."}, "start": {"default": 0, "type": "IntParser", "help": "Start searching from this offset."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search."}, "context": {"default": 64, "type": "IntParser", "help": "Context to print after the hit."}}, "description": "A Simple plugin which only yarascans the physical Address Space.\n\nThis plugin should not trigger profile autodetection and therefore should be\nusable on any file at all.", "active_modes": [], "name": "simple_yarascan"}, {"plugin": "Sockets", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Print list of open sockets. [Windows xp only]\n---------------------------------------------\n\nThis module enumerates the active sockets from tcpip.sys\n\nNote that if you are using a hibernated image this might not work\nbecause Windows closes all sockets before hibernating.\n\n_ADDRESS_OBJECT are arranged in a hash table found by the _AddrObjTable\nsymbol. The hash table has a size found by the _AddrObjTableSize symbol.", "active_modes": ["mode_windows_memory", "mode_xp"], "name": "sockets"}, {"plugin": "SvcScan", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Scan for Windows services\n", "active_modes": ["mode_windows_memory"], "name": "svcscan"}, {"plugin": "SymLinkScan", "args": {"scan_kernel_nonpaged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel non-paged pool."}, "scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "scan_kernel_code": {"default": false, "type": "Boolean", "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_paged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel paged pool."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search in each selected region."}, "scan_kernel_session_pools": {"default": false, "type": "Boolean", "help": "Scan session pools for all processes."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Scan for symbolic link objects\n", "active_modes": ["mode_windows_memory"], "name": "symlinkscan"}, {"plugin": "TSKFls", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "dir_path": {"default": "/", "positional": true, "type": "String", "help": "Directory path to print content of"}}, "description": "A mixin for those plugins requiring a physical address space.\n\nArgs:\n  physical_address_space: The physical address space to use. If not\n    specified we use the following options:\n\n    1) session.physical_address_space,\n\n    2) Guess using the load_as() plugin,\n\n    3) Use session.kernel_address_space.base.", "active_modes": ["mode_tsk"], "name": "fls"}, {"plugin": "ThrdScan", "args": {"scan_kernel_nonpaged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel non-paged pool."}, "scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "scan_kernel_code": {"default": false, "type": "Boolean", "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_paged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel paged pool."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search in each selected region."}, "scan_kernel_session_pools": {"default": false, "type": "Boolean", "help": "Scan session pools for all processes."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Scan physical memory for _ETHREAD objects\n", "active_modes": ["mode_windows_memory"], "name": "thrdscan"}, {"plugin": "Threads", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Enumerate threads.\n", "active_modes": ["mode_windows_memory"], "name": "threads"}, {"plugin": "Timers", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Print kernel timers and associated module DPCs.\n\nRef:\nhttp://computer.forensikblog.de/en/2011/10/timers-and-times.html", "active_modes": ["mode_windows_memory"], "name": "timers"}, {"plugin": "TskMmls", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A mixin for those plugins requiring a physical address space.\n\nArgs:\n  physical_address_space: The physical address space to use. If not\n    specified we use the following options:\n\n    1) session.physical_address_space,\n\n    2) Guess using the load_as() plugin,\n\n    3) Use session.kernel_address_space.base.", "active_modes": ["mode_tsk"], "name": "mmls"}, {"plugin": "UnloadedModules", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Print a list of recently unloaded modules.\n\nRef:\nhttp://volatility-labs.blogspot.de/2013/05/movp-ii-22-unloaded-windows-kernel_22.html", "active_modes": ["mode_windows_memory"], "name": "unloaded_modules"}, {"plugin": "UserAssist", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Print userassist registry keys and information\n", "active_modes": ["mode_windows_memory"], "name": "userassist"}, {"plugin": "UserHandles", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "free": {"type": "Boolean", "help": "Also include free handles."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "type": {"default": ".", "type": "RegEx", "help": "Filter handle type by this Regular Expression."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Dump the USER handle tables\n", "active_modes": ["mode_windows_memory"], "name": "userhandles"}, {"plugin": "Users", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Enumerate all users of this system.\n\nRef:\nsamparse.pl from RegRipper.\n\n# copyright 2012 Quantum Analytics Research, LLC\n# Author: H. Carvey, keydet89@yahoo.com", "active_modes": ["mode_windows_memory"], "name": "users"}, {"plugin": "VAD", "args": {"regex": {"type": "RegEx", "help": "A regular expression to filter VAD filenames."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "offset": {"type": "IntParser", "help": "Only print the vad corresponding to this offset."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Concise dump of the VAD.\n\nSimilar to windbg's !vad.", "active_modes": ["mode_windows_memory"], "name": "vad"}, {"plugin": "VADDump", "args": {"regex": {"type": "RegEx", "help": "A regular expression to filter VAD filenames."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "offset": {"type": "IntParser", "help": "Only print the vad corresponding to this offset."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Dumps out the vad sections to a file\n", "active_modes": ["mode_windows_memory"], "name": "vaddump"}, {"plugin": "VADMap", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "end": {"default": 9223372036854775808, "type": "IntParser", "help": "Stop reading at this offset."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "start": {"default": 0, "type": "IntParser", "help": "Start reading from this page."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Inspect each page in the VAD and report its status.\n\nThis allows us to see the address translation status of each page in the\nVAD.", "active_modes": ["mode_windows_memory"], "name": "vadmap"}, {"plugin": "VersionScan", "args": {"scan_filename": {"positional": true, "type": "String", "help": "Optional file to scan. If not specified we scan the physical address space."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "name_regex": {"default": ".", "type": "RegEx", "help": "Filter module names by this regex."}}, "description": "Scan the physical address space for RSDS versions.\n", "active_modes": [], "name": "version_scan"}, {"plugin": "VmScan", "args": {"no_nested": {"type": "Boolean", "help": "Don't do nested VM detection."}, "image_is_guest": {"default": false, "type": "Boolean", "help": "The image is for a guest VM, not the host."}, "offset": {"default": 0, "type": "IntParser", "help": "Offset in the physical image to start the scan."}, "quick": {"type": "Boolean", "help": "Perform quick VM detection."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "show_all": {"default": false, "type": "Boolean", "help": "Also show VMs that failed validation."}, "no_validation": {"default": false, "type": "Boolean", "help": "[DEBUG SETTING] Disable validation of VMs."}}, "description": "Scan the physical memory attempting to find hypervisors.\n\nOnce EPT values are found, you can use them to inspect virtual machines\nwith any of the rekall modules by using the --ept parameter and\nspecifying the guest virtual machine profile.\n\nSupports the detection of the following virtualization techonlogies:\n  * Intel VT-X with EPT. Microarchitectures:\n    + Westmere\n    + Nehalem\n    + Sandybridge\n    + Ivy Bridge\n    + Haswell\n\n  * Intel VT-X without EPT (unsupported page translation in rekall).\n    + Penryn\n\nFor the specific processor models that support EPT, please check:\nhttp://ark.intel.com/products/virtualizationtechnology.", "active_modes": [], "name": "vmscan"}, {"plugin": "VtoP", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Prints information about the virtual to physical translation.\n", "active_modes": ["mode_windows_memory"], "name": "vtop"}, {"plugin": "Win32kAutodetect", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Automatically detect win32k struct layout.\n", "active_modes": ["mode_windows_memory"], "name": "win32k_autodetect"}, {"plugin": "WinDNSCache", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "no_index": {"type": "Boolean", "help": "Should we not use the index"}, "hashtable": {"type": "String", "help": "Optionally provide the hashtable"}}, "description": "Dump the windows DNS resolver cache.\n", "active_modes": ["mode_amd64", "mode_vista_plus", "mode_windows_memory"], "name": "dns_cache"}, {"plugin": "WinDesktops", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Print information on each desktop.\n", "active_modes": ["mode_windows_memory"], "name": "desktops"}, {"plugin": "WinDllList", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Prints a list of dll modules mapped into each process.\n", "active_modes": ["mode_windows_memory"], "name": "dlllist"}, {"plugin": "WinEventHooks", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Print details on windows event hooks\n", "active_modes": ["mode_windows_memory"], "name": "eventhooks"}, {"plugin": "WinFindDTB", "args": {"verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A plugin to search for the Directory Table Base for windows systems.\n\nThere are a number of ways to find the DTB:\n\n- Scanner method: Scans the image for a known kernel process, and read the\n  DTB from its Process Environment Block (PEB).\n\n- Get the DTB from the KPCR structure.\n\n- Note that the kernel is mapped into every process's address space (with\n  the exception of session space which might be different) so using any\n  process's DTB from the same session will work to read kernel data\n  structures. If this plugin fails, try psscan to find potential DTBs.", "active_modes": ["mode_windows_memory"], "name": "find_dtb"}, {"plugin": "WinMemDump", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Dump windows processes.\n", "active_modes": ["mode_windows_memory"], "name": "memdump"}, {"plugin": "WinMemMap", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Calculates the memory regions mapped by a process.\n", "active_modes": ["mode_windows_memory"], "name": "memmap"}, {"plugin": "WinMessageHooks", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "List desktop and thread window message hooks.\n", "active_modes": ["mode_windows_memory"], "name": "messagehooks"}, {"plugin": "WinNetscan", "args": {"scan_kernel_nonpaged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel non-paged pool."}, "scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "scan_kernel_code": {"default": false, "type": "Boolean", "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_paged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel paged pool."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search in each selected region."}, "scan_kernel_session_pools": {"default": false, "type": "Boolean", "help": "Scan session pools for all processes."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Scan a Vista, 2008 or Windows 7 image for connections and sockets\n", "active_modes": ["mode_windows_memory"], "name": "netscan"}, {"plugin": "WinNetstat", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Enumerate image for connections and sockets\n", "active_modes": ["mode_windows_memory"], "name": "netstat"}, {"plugin": "WinPas2Vas", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "offsets": {"type": "ArrayIntParser", "help": "A list of physical offsets to resolve."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Resolves a physical address to a virtual addrress in a process.\n", "active_modes": ["mode_windows_memory"], "name": "pas2vas"}, {"plugin": "WinPhysicalMap", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Prints the boot physical memory map.\n", "active_modes": ["mode_windows_memory"], "name": "phys_map"}, {"plugin": "WinPhysicalYaraScanner", "args": {"hits": {"default": 10, "type": "IntParser", "help": "Quit after finding this many hits."}, "pre_context": {"default": 0, "type": "IntParser", "help": "Context to print before the hit."}, "yara_expression": {"type": "String", "help": "If provided we scan for this yara expression specified in the yara DSL."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "start": {"default": 0, "type": "IntParser", "help": "Start searching from this offset."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search."}, "context": {"default": 64, "type": "IntParser", "help": "Context to print after the hit."}, "yara_ast": {"type": "String", "help": "If provided we scan for this yara expression specified in the yara JSON AST."}}, "description": "An experimental yara scanner over the physical address space.\n\nYara does not provide a streaming interface, which means that when we scan\nfor yara rules we can only ever match strings within the same buffer. This\nis a problem for physical address space scanning because each page (although\nit might appear to be contiguous) usually comes from a different\nprocess/mapped file.\n\nTherefore we need a more intelligent way to apply yara signatures on the\nphysical address space:\n\n1. The original set of yara rules is converted into a single rule with all\nthe strings from all the rules in it. The rule has a condition \"any of them\"\nwhich will match any string appearing in the scanned buffer.\n\n2. This rule is then applied over the physical address space.\n\n3. For each hit we derive a context and add the hit to the context.\n\n4. Finally we test all the rules within the same context with the original\nrule set.", "active_modes": ["mode_windows_memory"], "name": "yarascan_physical"}, {"plugin": "WinPsList", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "List processes for windows.\n", "active_modes": ["mode_windows_memory"], "name": "pslist"}, {"plugin": "WinRammap", "args": {"start": {"default": 0, "positional": true, "type": "IntParser", "help": "Physical memory address to start displaying."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "end": {"type": "IntParser", "help": "Physical memory address to end displaying."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}}, "description": "Scan all physical memory and report page owners.\n", "active_modes": ["mode_windows_memory"], "name": "rammap"}, {"plugin": "WinSSDT", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Enumerate the SSDT.\n", "active_modes": ["mode_windows_memory"], "name": "ssdt"}, {"plugin": "WinSigScan", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Runs a signature scans against physical, kernel or process memory.\n", "active_modes": ["mode_windows_memory"], "name": "sigscan"}, {"plugin": "WinVirtualMap", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Prints the Windows Kernel Virtual Address Map.\n\nOn 32 bit windows, the kernel virtual address space can be managed\ndynamically. This plugin shows each region and what it is used for.\n\nNote that on 64 bit windows the address space is large enough to not worry\nabout it. In that case, the offsets and regions are hard coded.\n\nhttp://www.woodmann.com/forum/entry.php?219-Using-nt!_MiSystemVaType-to-navigate-dynamic-kernel-address-space-in-Windows7", "active_modes": ["mode_windows_memory"], "name": "virt_map"}, {"plugin": "WinYaraScan", "args": {"scan_process_memory": {"default": false, "type": "Boolean", "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "pre_context": {"default": 0, "type": "IntParser", "help": "Context to print before the hit."}, "string": {"type": "String", "help": "A verbatim string to search for."}, "binary_string": {"type": "String", "help": "A binary string (encoded as hex) to search for. e.g. 000102[1-200]0506"}, "yara_expression": {"type": "String", "help": "If provided we scan for this yara expression."}, "yara_file": {"type": "String", "help": "The yara signature file to read."}, "hits": {"default": 10, "type": "IntParser", "help": "Quit after finding this many hits."}, "scan_kernel": {"default": false, "type": "Boolean", "help": "Scan the entire kernel address space."}, "scan_kernel_session_pools": {"default": false, "type": "Boolean", "help": "Scan session pools for all processes."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "scan_kernel_nonpaged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel non-paged pool."}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "scan_kernel_code": {"default": false, "type": "Boolean", "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_paged_pool": {"default": false, "type": "Boolean", "help": "Scan the kernel paged pool."}, "scan_physical": {"default": false, "type": "Boolean", "help": "Scan the physical address space only."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "limit": {"default": 18446744073709551616, "type": "IntParser", "help": "The length of data to search in each selected region."}, "context": {"default": 64, "type": "IntParser", "help": "Context to print after the hit."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "Scan using yara signatures.\n", "active_modes": ["mode_windows_memory"], "name": "yarascan"}, {"plugin": "WindowsAddressResolver", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "symbol": {"default": [], "type": "ArrayString", "help": "List of symbols to lookup"}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "A windows specific address resolver plugin.\n", "active_modes": ["mode_windows_memory"], "name": "address_resolver"}, {"plugin": "WindowsPsxView", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles", "PSScan", "Thrdproc"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles", "PSScan", "Thrdproc"]}}, "description": "Find hidden processes with various process listings\n", "active_modes": ["mode_windows_memory"], "name": "psxview"}, {"plugin": "WindowsSetProcessContext", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "eprocess": {"default": [], "type": "ArrayIntParser", "help": "Kernel addresses of eprocess structs."}, "pids": {"default": [], "positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "type": "ChoiceArray", "help": "Method to list processes.", "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"]}}, "description": "A cc plugin for windows.\n", "active_modes": ["mode_windows_memory"], "name": "cc"}, {"plugin": "WindowsStations", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Displays all the windows stations by following lists.\n", "active_modes": ["mode_windows_memory"], "name": "windows_stations"}, {"plugin": "WindowsTimes", "args": {"dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "description": "Return current time, as known to the kernel.\n", "active_modes": ["mode_windows_memory"], "name": "times"}, {"plugin": "Zsh", "args": {"proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"hidden": true, "type": "IntParser", "help": "The DTB physical address."}, "verbosity": {"default": 1, "type": "IntParser", "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}, "main_arena": {"type": "IntParser", "help": "The main_arena pointer either extracted from the statically linked ELF binary or from the libc library."}, "malloc_par": {"type": "IntParser", "help": "The malloc_par pointer either extracted from the linked ELF binary or from the libc library."}, "pids": {"positional": true, "type": "ArrayIntParser", "help": "One or more pids of processes to select."}, "method": {"default": ["InitTask"], "type": "ChoiceArray", "help": "Method to list processes (Default uses all methods).", "choices": ["InitTask"]}}, "description": "Extracts the zsh command history, similar to the existing bash plugin.\n", "active_modes": ["mode_linux_memory"], "name": "zsh"}]